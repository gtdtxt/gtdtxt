environment:
  global:
    # This will be used as part of the zipfile name
    PROJECT_NAME: gtdtxt
  # TODO feel free to delete targets/channels you don't need
  matrix:
    # Stable channel
    - TARGET: i686-pc-windows-gnu
      CHANNEL: stable
    - TARGET: i686-pc-windows-msvc
      CHANNEL: stable
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: stable
    - TARGET: x86_64-pc-windows-msvc
      CHANNEL: stable
    # Beta channel
    # - TARGET: i686-pc-windows-gnu
    #   CHANNEL: beta
    # - TARGET: i686-pc-windows-msvc
    #   CHANNEL: beta
    # - TARGET: x86_64-pc-windows-gnu
    #   CHANNEL: beta
    # - TARGET: x86_64-pc-windows-msvc
    #   CHANNEL: beta
    # Nightly channel
    # - TARGET: i686-pc-windows-gnu
    #   CHANNEL: nightly
    # - TARGET: i686-pc-windows-msvc
    #   CHANNEL: nightly
    # - TARGET: x86_64-pc-windows-gnu
    #   CHANNEL: nightly
    # - TARGET: x86_64-pc-windows-msvc
    #   CHANNEL: nightly

# Install Rust and Cargo
# (Based on from https://github.com/rust-lang/libc/blob/master/appveyor.yml)
install:
  - ps: Start-FileDownload "https://static.rust-lang.org/dist/channel-rust-stable"
  - ps: $env:RUST_VERSION = Get-Content channel-rust-stable | select -first 1 | %{$_.split('-')[1]}
  - if NOT "%CHANNEL%" == "stable" set RUST_VERSION=%CHANNEL%
  - ps: Start-FileDownload "https://static.rust-lang.org/dist/rust-${env:RUST_VERSION}-${env:TARGET}.exe"
  - rust-%RUST_VERSION%-%TARGET%.exe /VERYSILENT /NORESTART /DIR="C:\Program Files (x86)\Rust"
  - SET PATH=%PATH%;C:\Program Files (x86)\Rust\bin
  - if "%TARGET%" == "i686-pc-windows-gnu" set PATH=%PATH%;C:\msys64\mingw32\bin
  - if "%TARGET%" == "x86_64-pc-windows-gnu" set PATH=%PATH%;C:\msys64\mingw64\bin
  - rustc -V
  - cargo -V

# ???
build: false

# Equivalent to Travis' `script` phase
# TODO modify this phase as you see fit

test_script:
  - cargo build --verbose
  # - cargo run
  - cargo test

before_deploy:
  # Generate artifacts for release
  - cargo build --release
  - mkdir staging
  # TODO update this part to copy the artifacts that make sense for your project
  - copy target\release\gtdtxt.exe staging
  - cd staging
    # release zipfile will look like 'rust-everywhere-v1.2.3-x86_64-pc-windows-msvc'
  - 7z a ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip *
  - appveyor PushArtifact ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip

deploy:
  description: 'Windows release'
  # All the zipped artifacts will be deployed
  artifact: /.*\.zip/
  # TODO Regenerate this auth_token for your project, this one won't work for you. Here's how:
  # - Go to 'https://github.com/settings/tokens/new' and generate a Token with only the
  # `public_repo` scope enabled
  # - Then go to 'https://ci.appveyor.com/tools/encrypt' and enter the newly generated token.
  # - Enter the "encrypted value" below
  auth_token:
    secure: Ql8ucXhr0bf3MGY7R9Qgp3LnFNRKnqqyMS3lzUZPTfO5uxJQTIApnSOho8lRIV5o
  provider: GitHub
  # deploy when a new tag is pushed and only on the stable channel
  on:
    # channel to use to produce the release artifacts
    # NOTE make sure you only release *once* per target
    # TODO you may want to pick a different channel
    CHANNEL: stable
    appveyor_repo_tag: true

branches:
  only:
    - master
